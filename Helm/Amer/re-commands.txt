helm version
helm repo list
helm repo add <repo-name> <repo-url>
helm repo add bitnami https://chart.bitnami.com/bitnami
helm repo list
helm search repo nginx
helm search repo apache
bitnami/nginx
helm install <release-name> <chart-name>
helm install my-nginx bitnami/nginx
my-nginx   default   1   2025-01-26 17:29:00.38552466 +0000 UTC  deployed        nginx-18.3.5       1.27.3
helm list

helm status my-nginx

-----------------
minikube ssh
docker images
-----------
kubectl create namespace devops
helm install -n devops my-nginx bitnami/nginx
helm status my-nginx -n devops
-------------
helm list -n devops
helm uninstall my-nginx -n devops
helm list -n devops
---------------
minikube delete
minikube start
helm install mydb bitnami/mysql --set auth.rootPassword = test1234
helm install mydb bitnami/mysql --values ./values.yaml -n devops

sudo vi values.yaml
auth:
  rootPassword: "test1234"

NAME: mydb
LAST DEPLOYED: Sun Jan 26 19:53:13 2025
NAMESPACE: devops
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
CHART NAME: mysql
CHART VERSION: 12.2.2
APP VERSION: 8.4.4

Did you know there are enterprise versions of the Bitnami catalog? For enhanced secure software supply chain features, unlimited pulls from Docker, LTS support, or application customization, see Bitnami Premium or Tanzu Application Catalog. See https://www.arrow.com/globalecs/na/vendors/bitnami for more information.

** Please be patient while the chart is being deployed **

Tip:

  Watch the deployment status using the command: kubectl get pods -w --namespace devops

Services:

  echo Primary: mydb-mysql.devops.svc.cluster.local:3306

Execute the following to get the administrator credentials:

  echo Username: root
  MYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace devops mydb-mysql -o jsonpath="{.data.mysql-root-password}" | base64 -d)

To connect to your database:

  1. Run a pod that you can use as a client:

      kubectl run mydb-mysql-client --rm --tty -i --restart='Never' --image  docker.io/bitnami/mysql:8.4.4-debian-12-r0 --namespace devops --env MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD --command -- bash

  2. To connect to primary service (read/write):

      mysql -h mydb-mysql.devops.svc.cluster.local -uroot -p"$MYSQL_ROOT_PASSWORD"






WARNING: There are "resources" sections in the chart not set. Using "resourcesPreset" is not recommended for production. For production installations, please set the following values according to your workload needs:
  - primary.resources
  - secondary.resources
+info https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/

to get password:
----------------
echo $(kubectl get secret --namespace devops mydb-mysql -o jsonpath="{.data.mysql-root-password}" | base64 -d)
	test1234
--------------------------
helm status mydb -n devops
NAME: mydb
LAST DEPLOYED: Sun Jan 26 19:53:13 2025
NAMESPACE: devops
STATUS: deployed
REVISION: 1

helm repo update
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "bitnami" chart repository
Update Complete. ⎈Happy Helming!⎈
NAME: mydb
LAST DEPLOYED: Sun Jan 26 20:07:27 2025
NAMESPACE: devops
STATUS: deployed
REVISION: 2

helm status my-nginx -n devops

helm upgrade -n devops my-nginx bitnami/nginx

#default values
helm upgrade -n devops mydb bitnami/mysql
#same as
helm upgrade -n devops mydb bitnami/mysql --reuse-values

Release "mydb" has been upgraded. Happy Helming!

vagrant@helm:~$ echo $(kubectl get secret --namespace devops mydb-mysql -o jsonpath="{.data.mysql-root-password}" | base64 -d)
test1234
---------
helm upgrade -n devops mydb bitnami/mysql --values ./values.yaml
Release "mydb" has been upgraded. Happy Helming!
NAME: mydb
LAST DEPLOYED: Sun Jan 26 20:27:04 2025
NAMESPACE: devops
STATUS: deployed
REVISION: 3

echo $(kubectl get secret --namespace devops mydb-mysql -o jsonpath="{.data.mysql-root-password}" | base64 -d)
test1234
---------

vagrant@helm:~$ helm status mydb -n devops
NAME: mydb
LAST DEPLOYED: Sun Jan 26 20:27:04 2025
NAMESPACE: devops
STATUS: deployed
REVISION: 3

vagrant@helm:~$ helm list -n devops
NAME    NAMESPACE       REVISION        UPDATED                                 STATUS          CHART           APP VERSION
mydb    devops          3         
-------------
helm ls

vagrant@helm:~$ kubectl get secrets -n devops
NAME                         TYPE                 DATA   AGE
mydb-mysql                   Opaque               2      47m

helm uninstall mydb -n devops --keep-history

vagrant@helm:~$ helm uninstall mydb -n devops --keep-history
release "mydb" uninstalled

vagrant@helm:~$ helm ls -n devops
NAME    NAMESPACE       REVISION        UPDATED STATUS  CHART   APP VERSION
vagrant@helm:~$ kubectl get secrets -n devops
NAME                         TYPE                 DATA   AGE
---------------------------------------------------------
dry-run:
--------
to debug and see if the templates that are getting generated
are ok for installation or upgrade

1-to simulate installation
--------------------------
vagrant@helm:~$ helm install mydb bitnami/mysql -n devops --values ./values.yaml --dry-run
NAME: mydb
LAST DEPLOYED: Sun Jan 26 20:53:55 2025
NAMESPACE: devops
STATUS: pending-install
REVISION: 1
TEST SUITE: None
HOOKS:
MANIFEST:
---
# Source: mysql/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: mydb-mysql
  namespace: "devops"
  labels:
    app.kubernetes.io/instance: mydb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.2.2
    app.kubernetes.io/part-of: mysql
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: mydb
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mysql
      app.kubernetes.io/version: 8.4.4
      helm.sh/chart: mysql-12.2.2
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow connection from other cluster pods
    - ports:
        - port: 3306
---
# Source: mysql/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mydb-mysql
  namespace: "devops"
  labels:
    app.kubernetes.io/instance: mydb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.2.2
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: mydb
      app.kubernetes.io/name: mysql
      app.kubernetes.io/part-of: mysql
      app.kubernetes.io/component: primary
---
# Source: mysql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mydb-mysql
  namespace: "devops"
  labels:
    app.kubernetes.io/instance: mydb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.2.2
    app.kubernetes.io/part-of: mysql
automountServiceAccountToken: false
secrets:
  - name: mydb-mysql
---
# Source: mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mydb-mysql
  namespace: "devops"
  labels:
    app.kubernetes.io/instance: mydb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.2.2
    app.kubernetes.io/part-of: mysql
type: Opaque
data:
  mysql-root-password: "dGVzdDEyMzQ="
  mysql-password: "czdsZk9idE1YTQ=="
---
# Source: mysql/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mydb-mysql
  namespace: "devops"
  labels:
    app.kubernetes.io/instance: mydb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.2.2
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    authentication_policy='* ,,'
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port=3306
    mysqlx=0
    mysqlx_port=33060
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=*
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    slow_query_log=0
    long_query_time=10.0

    [client]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin

    [manager]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
---
# Source: mysql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: mydb-mysql-headless
  namespace: "devops"
  labels:
    app.kubernetes.io/instance: mydb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.2.2
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector:
    app.kubernetes.io/instance: mydb
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: primary
---
# Source: mysql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mydb-mysql
  namespace: "devops"
  labels:
    app.kubernetes.io/instance: mydb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.2.2
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector:
    app.kubernetes.io/instance: mydb
    app.kubernetes.io/name: mysql
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
---
# Source: mysql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mydb-mysql
  namespace: "devops"
  labels:
    app.kubernetes.io/instance: mydb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.2.2
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  podManagementPolicy: ""
  selector:
    matchLabels:
      app.kubernetes.io/instance: mydb
      app.kubernetes.io/name: mysql
      app.kubernetes.io/part-of: mysql
      app.kubernetes.io/component: primary
  serviceName: mydb-mysql-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: e5c7cb85274a114e8cd122577ed8ba9d12fee4c28703893fa38445747208c1db
      labels:
        app.kubernetes.io/instance: mydb
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mysql
        app.kubernetes.io/version: 8.4.4
        helm.sh/chart: mysql-12.2.2
        app.kubernetes.io/part-of: mysql
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: mydb-mysql

      automountServiceAccountToken: false
      affinity:
        podAffinity:

        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: mydb
                    app.kubernetes.io/name: mysql
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: preserve-logs-symlinks
          image: docker.io/bitnami/mysql:8.4.4-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash

              . /opt/bitnami/scripts/libfs.sh
              # We copy the logs folder because it has symlinks to stdout and stderr
              if ! is_dir_empty /opt/bitnami/mysql/logs; then
                cp -r /opt/bitnami/mysql/logs /emptydir/app-logs-dir
              fi
          volumeMounts:
            - name: empty-dir
              mountPath: /emptydir
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:8.4.4-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mydb-mysql
                  key: mysql-root-password
            - name: MYSQL_ENABLE_SSL
              value: "no"
            - name: MYSQL_PORT
              value: "3306"
            - name: MYSQL_DATABASE
              value: "my_database"
          envFrom:
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin ping -uroot -p"${password_aux}" | grep "mysqld is alive"
          startupProbe:
            failureThreshold: 10
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin ping -uroot -p"${password_aux}" | grep "mysqld is alive"
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/logs
              subPath: app-logs-dir
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: mydb-mysql
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/instance: mydb
          app.kubernetes.io/name: mysql
          app.kubernetes.io/component: primary
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"

NOTES:
CHART NAME: mysql
CHART VERSION: 12.2.2
APP VERSION: 8.4.4

Did you know there are enterprise versions of the Bitnami catalog? For enhanced secure software supply chain features, unlimited pulls from Docker, LTS support, or application customization, see Bitnami Premium or Tanzu Application Catalog. See https://www.arrow.com/globalecs/na/vendors/bitnami for more information.

** Please be patient while the chart is being deployed **

Tip:

  Watch the deployment status using the command: kubectl get pods -w --namespace devops

Services:

  echo Primary: mydb-mysql.devops.svc.cluster.local:3306

Execute the following to get the administrator credentials:

  echo Username: root
  MYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace devops mydb-mysql -o jsonpath="{.data.mysql-root-password}" | base64 -d)

To connect to your database:

  1. Run a pod that you can use as a client:

      kubectl run mydb-mysql-client --rm --tty -i --restart='Never' --image  docker.io/bitnami/mysql:8.4.4-debian-12-r0 --namespace devops --env MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD --command -- bash

  2. To connect to primary service (read/write):

      mysql -h mydb-mysql.devops.svc.cluster.local -uroot -p"$MYSQL_ROOT_PASSWORD"

WARNING: There are "resources" sections in the chart not set. Using "resourcesPreset" is not recommended for production. For production installations, please set the following values according to your workload needs:
  - primary.resources
  - secondary.resources
+info https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
--------------------------------
dry-run:
--------
2-also to simulate upgrade 
--------------------------
helm upgrade nginx bitnami/nginx -n devops --dry-run
Release "nginx" has been upgraded. Happy Helming!
NAME: nginx
LAST DEPLOYED: Sun Jan 26 21:16:09 2025
NAMESPACE: devops
STATUS: pending-upgrade
REVISION: 2
---------------------------------------------------------
kubectl get secrets -n devops

sudo vi values1.yaml
auth:
  rootPassword: test1234
image:
  pullPolicy: Always

helm install mysql bitnami/mysql --values ./values1.yml -n devops
helm upgrade mysql bitnami/mysql --values ./values1.yml -n devops

vagrant@helm:~$ kubectl get secrets -n devops
NAME                          TYPE                 DATA   AGE
sh.helm.release.v1.mysql.v1   helm.sh/release.v1   1      107s
sh.helm.release.v1.mysql.v2   helm.sh/release.v1   1      36s

kubectl get secrets sh.helm.release.v1.mysql.v1 -n devops -o yaml
----------------------------------------------------------------
vagrant@helm:~$ helm ls -n devops
NAME    NAMESPACE       REVISION        UPDATED                                 STATUS          CHART           APP VERSION
mysql   devops          2               2025-01-27 11:44:20

helm get notes mysql -n devops

vagrant@helm:~$ helm get values mysql -n devops
USER-SUPPLIED VALUES:
auth:
  rootPassword: test1234
image:
  pullPolicy: Always

helm get values mysql -n devops --all

helm get values mysql -n devops --revision 2
USER-SUPPLIED VALUES:
auth:
  rootPassword: test1234
image:
  pullPolicy: Always

values.yaml
auth:
  rootPassword: test1234
  
helm upgrade mysql bitnami/mysql -n devops --values ./values.yaml

helm ls -n devops
NAME    NAMESPACE       REVISION        UPDATED                                 STATUS          CHART           APP VERSION
mysql   devops          3               2025-01-27 12:00:27

latest revision:

helm get values mysql -n devops

vagrant@helm:~$ helm get values mysql -n devops --revision 3
USER-SUPPLIED VALUES:
auth:
  rootPassword: test1234

helm get manifest mysql -n devops
helm get manifest mysql -n devops --revision 3
helm get manifest mysql -n devops --revision 3  > manifest.yaml
--------------------------------------------------------
vagrant@helm:~$ helm history mysql -n devops
REVISION        UPDATED                         STATUS          CHART           APP VERSION     DESCRIPTION
1               Mon Jan 27 11:43:09 2025        superseded      mysql-12.2.2    8.4.4           Install complete
2               Mon Jan 27 11:44:20 2025        superseded      mysql-12.2.2    8.4.4           Upgrade complete
3               Mon Jan 27 12:00:27 2025        deployed        mysql-12.2.2    8.4.4           Upgrade complete

helm install mywebserver bitnami/apache -n devops

vagrant@helm:~$ helm upgrade mywebserver bitnami/apache --set image.pullPolicy=test -n devops
Error: UPGRADE FAILED: cannot patch "mywebserver-apache" with kind Deployment: Deployment.apps "mywebserver-apache" 
is invalid: [spec.template.spec.containers[0].imagePullPolicy: Unsupported value: "test": supported values: "Always", 
"IfNotPresent", "Never", spec.template.spec.initContainers[0].imagePullPolicy: Unsupported value: "test": supported 
values: "Always", "IfNotPresent", "Never"]
--------------------------------------
roll back:
----------
vagrant@helm:~$ helm history mysql -n devops
REVISION        UPDATED                         STATUS          CHART           APP VERSION     DESCRIPTION
1               Mon Jan 27 11:43:09 2025        superseded      mysql-12.2.2    8.4.4           Install complete
2               Mon Jan 27 11:44:20 2025        superseded      mysql-12.2.2    8.4.4           Upgrade complete
3               Mon Jan 27 12:00:27 2025        deployed        mysql-12.2.2    8.4.4  

vagrant@helm:~$ helm rollback mysql 2 -n devops
Rollback was a success! Happy Helming!

vagrant@helm:~$ helm history mysql -n devops
REVISION        UPDATED                         STATUS          CHART           APP VERSION     DESCRIPTION
1               Mon Jan 27 11:43:09 2025        superseded      mysql-12.2.2    8.4.4           Install complete
2               Mon Jan 27 11:44:20 2025        superseded      mysql-12.2.2    8.4.4           Upgrade complete
3               Mon Jan 27 12:00:27 2025        superseded      mysql-12.2.2    8.4.4           Upgrade complete
4               Mon Jan 27 19:30:49 2025        deployed        mysql-12.2.2    8.4.4         

vagrant@helm:~$ helm ls -n devops
NAME            NAMESPACE       REVISION        UPDATED                                 STATUS          CHART              APP VERSION
mysql           devops          4               2025-01-27 19:30:49.
-----------------------------------------------------------
helm install mysql-server bitnami/mysql --namespace devops1 --create-namespace
helm install mysqlserver bitnami/mysql -n devops2 --create-namespace

vagrant@helm:~$ helm ls -A
NAME            NAMESPACE       REVISION        UPDATED                                 STATUS          CHART              APP VERSION
inginx          default         1               2025-01-26 19:27:04.435278579 +0000 UTC deployed        nginx-18.3.5       1.27.3
memcached       default         1               2025-01-26 19:29:20.510564194 +0000 UTC deployed        memcached-7.6.1    1.6.34
my-nginx        default         1               2025-01-26 17:29:00.38552466 +0000 UTC  deployed        nginx-18.3.5       1.27.3
mydb            default         1               2025-01-26 19:15:45.787176273 +0000 UTC deployed        mysql-12.2.2       8.4.4
mysql           devops          4               2025-01-27 19:30:49.633218806 +0000 UTC deployed        mysql-12.2.2       8.4.4
mysqlserver     devops1         1               2025-01-27 19:42:53.738199767 +0000 UTC deployed        mysql-12.2.2       8.4.4
mysqlserver     devops2         1               2025-01-27 19:43:21.055466381 +0000 UTC deployed        mysql-12.2.2       8.4.4
mywebserver     devops          2               2025-01-27 13:07:42.463028927 +0000 UTC failed          apache-11.3.2      2.4.63
nginx           devops          2               2025-01-26 22:31:54.144047985 +0000 UTC deployed        nginx-18.3.5       1.27.3
rabbitmq        default         1               2025-01-26 19:30:21.284696558 +0000 UTC deployed        rabbitmq-15.2.4    4.0.5
tomcat          default         1               2025-01-26 19:28:28.387712423 +0000 UTC deplo

same command to install or upgrade a release
vagrant@helm:~$ helm upgrade --install mysql2 bitnami/mysql -n devops3 --create-namespace
Release "mysql2" does not exist. Installing it now.
NAME: mysql2
LAST DEPLOYED: Mon Jan 27 19:50:16 2025
NAMESPACE: devops3
STATUS: deployed
REVISION: 1

vagrant@helm:~$ helm upgrade --install mysql2 bitnami/mysql -n devops3 --create-namespace
Release "mysql2" has been upgraded. Happy Helming!
NAME: mysql2
LAST DEPLOYED: Mon Jan 27 19:50:29 2025
NAMESPACE: devops3
STATUS: deployed
REVISION: 2

vagrant@helm:~$ helm install bitnami/apache --generate-name
NAME: apache-1738007657
LAST DEPLOYED: Mon Jan 27 19:54:23 2025
NAMESPACE: default
STATUS: deployed
REVISION: 1

vagrant@helm:~$ helm install bitnami/apache --generate-name --name-template "{{randAlpha 7 | lower}}"
NAME: vekvpuy
LAST DEPLOYED: Mon Jan 27 20:03:09 2025
NAMESPACE: default
STATUS: deployed
REVISION: 1

vagrant@helm:~$ helm install bitnami/apache --generate-name --name-template "{{randAlpha 7 | lower}}" -n devops4 --create-namespace
NAME: dxefbtq
LAST DEPLOYED: Mon Jan 27 20:07:22 2025
NAMESPACE: devops4
STATUS: deployed
REVISION: 1
--------------------------------------------
vagrant@helm:~$ helm install mysql5 bitnami/mysql --wait
Error: INSTALLATION FAILED: context deadline exceeded

vagrant@helm:~$ helm install mysql5 bitnami/mysql --wait --time-out 5m10s

to rollback to a pre-successfull release:
---------------------------------------
vagrant@helm:~$ helm install mysql6 bitnami/mysql --atomic

vagrant@helm:~$ helm install mysql6 bitnami/mysql --atomic --wait

vagrant@helm:~$ helm install mysql7 bitnami/mysql --atomic --time-out 7m12s
--------------------------------------------------------------------
Forceful upgrades:
-----------------
helm upgrade mysql bitnami/mysql --force

we do a helm upgrade.
kubernetes will receive a request to modify the existing objects.
It will restart those pods whose values have changed.
It will not restart all the pods all the time.
It will only restart the pods if there are any values that have changed for those pods.
But if we have a requirement where you want to forcefully start the pods, when you do a upgrade, you
use the --force option internally.
Helm will delete the current deployment instead of modifying the deployment, it will delete the deployment
and it will recreate the deployment.
As a result, Kube will delete the old pods and create new ones.
So there will be some downtime when you use hyphen hyphen force option.
So it is not for the  CI CD pipeline.
You don't want to use this always.
-------------------------------------------------------------------
cleanup-on-failure updates:
--------------------------
helm upgrade mysql bitnami/mysql --cleanup-on-failure

So if a upgrade fails, we want to clean up all the resources that were created.
This could be config maps.
This could be secrets.
We don't want them to be dangling out there.
So if you want them to be cleaned up, you use this --cleanup-on-failure option.
So if you want them to be cleaned up, you use this --cleanup-on-failure option.
to see what went wrong and with which object if you use this option.
All those objects will be cleaned up.
so need not be left with anything.
So if you want to debug, will not be using this hyphen hyphen cleanup one failure option.
--------------------------------------------------------------------
Create first chart:
------------------
vagrant@helm:~$ pwd
/home/vagrant

vagrant@helm:~$ mkdir documents && cd documents && mkdir helm && cd helm

vagrant@helm:~/documents/helm$ minikube delete

vagrant@helm:~/documents/helm$ minikube start

#helm create command uses nginx chart to create our chart
vagrant@helm:~/documents/helm$ helm create firstchart

vagrant@helm:~/documents/helm$ cd firstchart/
vagrant@helm:~/documents/helm/firstchart$ ls
Chart.yaml  charts  templates  values.yaml
vagrant@helm:~/documents/helm/firstchart$ cd templates/
vagrant@helm:~/documents/helm/firstchart/templates$ ls
NOTES.txt  _helpers.tpl  deployment.yaml  hpa.yaml  ingress.yaml  service.yaml  serviceaccount.yaml  tests
vagrant@helm:~/documents/helm/firstchart/templates$ cd ..
vagrant@helm:~/documents/helm/firstchart$ cd charts/
vagrant@helm:~/documents/helm/firstchart/charts$ ls
vagrant@helm:~/documents/helm/firstchart/charts$
------------------------------------------------------
helm install <release-name> <chart-name>

vagrant@helm:~/documents/helm$ helm install firstapp firstchart
NAME: firstapp
LAST DEPLOYED: Mon Jan 27 23:09:18 2025
NAMESPACE: default
STATUS: deployed
REVISION: 1
NOTES:
1. Get the application URL by running these commands:
  export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/name=firstchart,app.kubernetes.io/instance=firstapp1" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace default $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace default port-forward $POD_NAME 8080:$CONTAINER_PORT
----------------------------------------------------------------
helm package:
------------
vagrant@helm:~/documents/helm$ ls
firstchart
vagrant@helm:~/documents/helm$ helm package firstchart
Successfully packaged chart and saved it to: /home/vagrant/documents/helm/firstchart-0.1.0.tgz

vagrant@helm:~/documents/helm$ helm package firstchart --dependencies-update

if this chart depends on other charts, it will pull the latest versions
of all those charts and upts them under this chart's folder before
the packaging is done weather that there it is.
Syntactical issues are indentation issues in the yaml files to use it, use Helm Lint and the Chart

vagrant@helm:~/documents/helm$ helm package firstchart -u

vagrant@helm:~/do
vagrant@helm:~/documents/helm$ helm lint firstchart
==> Linting firstchart
[INFO] Chart.yaml: icon is recommended

1 chart(s) linted, 0 chart(s) failed

lint more than one chart:
------------------------
vagrant@helm:~/documents/helm$ helm lint firstchart secondchart
------------------------------------------------------------------
vagrant@helm:~/documents/helm$ sudo vi firstchart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
  {{"Helm Templating is"  -}} , {{- "Cool"}}  <--- add this line

vagrant@helm:~/documents/helm$ helm template firstchart
---
# Source: firstchart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
  Helm Templating is,Cool
metadata:
  name: release-name-firstchart
----------------------------
vagrant@helm:~/documents/helm$ sudo vi firstchart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
{{- if .Values.my.flag}}        <----add this function
{{"Output of if" | nindent 2}}   <----nindent (spaces before "Output of if")
{{- end}}

vagrant@helm:~/documents/helm$ sudo vi firstchart/values.yaml
#added by Amer
my:
  flag: true   <--- add these values

vagrant@helm:~/documents/helm$ helm template firstchart
# Source: firstchart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment

  Output of if   <--- have 2 spaces before "Output of if"
metadata:

----------------------
vagrant@helm:~/documents/helm$ sudo vi firstchart/values.yaml
#added by Amer
my:
  flag: false  <---change to false

vagrant@helm:~/documents/helm$ helm template firstchart
# Source: firstchart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rele
-----------------------
vagrant@helm:~/documents/helm$ sudo vi firstchart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
{{- if .Values.my.flag}}    	<---begining    
{{"Output of if" | nindent 2}}
{{- else}}
{{"Output of else" | nindent 2}}   
{{- end}}			<---end

vagrant@helm:~/documents/helm$ sudo vi firstchart/values.yaml
#added by Amer
my:
  flag: false   <--- 

vagrant@helm:~/documents/helm$ helm template firstchart
# Source: firstchart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment

  Output of else   <--- 
metadata:
---------------------
vagrant@helm:~/documents/helm$ sudo vi firstchart/values.yaml
#added by Amer
my:
  flag: false
  values:
    - egy
    - india
    - usa
    - uk

vagrant@helm:~/documents/helm$ sudo vi firstchart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
{{- if .Values.my.flag}}        <---begining
{{"Output of if" | nindent 2}}
{{- else}}
{{"Output of else" | nindent 2}}   
{{- end}}			<---end

{{- with .Values.my.values}}  		<---begining
countriesOfDeployment:
{{- toYaml . | nindent 2}}
{{- end}}			<---end

vagrant@helm:~/documents/helm$ helm template firstchart
---
# Source: firstchart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment

  Output of else
countriesOfDeployment:
  - egy
  - india
  - usa
  - uk
-----------------------------------------------------------
vagrant@helm:~/documents/helm$ sudo vi firstchart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
{{ $myFLAG := "test"}}
{{ $myFLAG := true}}

{{- if .Values.my.flag}}        <---begining
{{"Output of if" | nindent 2}}
{{- else}}
{{"Output of else" | nindent 2}}   
{{- end}}         <---end

{{- with .Values.my.values}}         <---begining
countriesOfDeployment:
{{- toYaml . | nindent 2}}
{{- end}}            <---end

vagrant@helm:~/documents/helm$ helm template firstchart

---------------------------------------------------------------
loop:
----
vagrant@helm:~/documents/helm$ sudo vi firstchart/values.yaml
#added by Amer
my:
  flag: false
  values:
    - egy
    - india
    - usa
    - uk

vagrant@helm:~/documents/helm$ sudo vi firstchart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
{{- if .Values.my.flag}}        
{{"Output of if" | nindent 2}}
{{- else}}
{{"Output of else" | nindent 2}}   
{{- end}}
{{- with .Values.my.values}}
countriesOfDeployment:
{{- toYaml . | nindent 2}}
{{- end}}

countriesOfDeployment:			<---add these lines
{{- range .Values.my.values}}		<---begining
  - {{ . | upper | quote}}
{{- end}}			<---end

vagrant@helm:~/documents/helm$ helm template firstchart
# Source: firstchart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment

  Output of else
countriesOfDeployment:
  - egy
  - india
  - usa
  - uk

countriesOfDeployment:
  - "EGY"
  - "INDIA"
  - "USA"
  - "UK"
-----------------------------------------------------------
vagrant@helm:~/documents/helm$ sudo vi firstchart/templates/deployment.yaml


apiVersion: apps/v1
kind: Deployment
{{- if .Values.my.flag}}        
{{"Output of if" | nindent 2}}
{{- else}}
{{"Output of else" | nindent 2}}   
{{- end}}
{{- with .Values.my.values}}
countriesOfDeployment:
{{- toYaml . | nindent 2}}
{{- end}}

countriesOfDeployment:			
{{- range .Values.my.values}}		<---begining
  - {{ . | upper | quote}}
{{- end}}			<---end

countriesOfDeployment:			<---add these lines
{{- range $key,$value .Values.my.image}}		<---begining
  - {{ . | upper | quote}}
{{- end}}			<---end
--------------------------------------------------------------
vagrant@helm:~/documents/helm$ sudo vi firstchart/values.yaml
image:
  - pullPolicy: "IfNotPresent"
  - repository: "nginx"
  - tag: ""

vagrant@helm:~/documents/helm$ sudo vi firstchart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
{{- if .Values.my.flag}}        
{{"Output of if" | nindent 2}}
{{- else}}
{{"Output of else" | nindent 2}}   
{{- end}}
{{- with .Values.my.values}}
countriesOfDeployment:
{{- toYaml . | nindent 2}}
{{- end}}

countriesOfDeployment:			
{{- range .Values.my.values}}
  - {{ . | upper | quote}}
{{- end}}

countriesOfDeployment:			<---add these lines
{{- range $key,$value .Values.my.image}}		<---begining
  - {{ . | upper | quote}}
{{- end}}			<---end

image:			<---add these lines
{{- range $key,$value := .Values.image}}		<---begining
  - {{$key}}: {{$value | quote}}
{{- end}}			<---end



vagrant@helm:~/documents/helm$ helm template firstchart
# Source: firstchart/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment

  Output of else
countriesOfDeployment:
  - egy
  - india
  - usa
  - uk

countriesOfDeployment:
  - "EGY"
  - "INDIA"
  - "USA"
  - "UK"
  
image:
  repository: nginx
  pullPolicy: IfNotPresent
  tag: ""






