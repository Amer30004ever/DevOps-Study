# Comprehensive Guide to Kubernetes YAML File Structure

## Introduction to Kubernetes YAML

Kubernetes uses YAML (YAML Ain't Markup Language) files to define the desired state of your cluster's resources. These files are declarative, meaning you specify what you want rather than how to achieve it.

## Basic YAML Structure

All Kubernetes YAML files share a common structure with these key fields:

```yaml
apiVersion: v1        # Kubernetes API version
kind: Pod             # Type of resource
metadata:             # Identifying information
  name: my-pod
  labels:
    app: my-app
spec:                 # Desired state of the resource
  containers:
  - name: my-container
    image: nginx
```

## Common YAML Components

### 1. apiVersion
Specifies which Kubernetes API version to use. Examples:
- `v1` (core API group)
- `apps/v1` (for Deployments, StatefulSets, etc.)
- `batch/v1` (for Jobs)
- `networking.k8s.io/v1` (for Ingress)

### 2. kind
Defines the type of resource. Common types:
- `Pod`
- `Deployment`
- `Service`
- `ConfigMap`
- `Secret`
- `PersistentVolumeClaim`
- `Namespace`
- `Job`
- `CronJob`
- `Ingress`

### 3. metadata
Contains identifying information:
- `name`: Resource name (required)
- `namespace`: Where the resource lives
- `labels`: Key-value pairs for organization/selection
- `annotations`: Non-identifying metadata

### 4. spec
Describes the desired state of the resource. Structure varies by resource type.

## Kubernetes Resource Types with Examples

### 1. Pod

The smallest deployable unit in Kubernetes.

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
  labels:
    app: nginx
spec:
  containers:
  - name: nginx-container
    image: nginx:1.19
    ports:
    - containerPort: 80
```

### 2. Deployment

Manages a set of identical pods with rolling updates.

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.19
        ports:
        - containerPort: 80
```

### 3. Service

Exposes pods as network services.

```yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
```

### 4. ConfigMap

Stores non-confidential configuration data.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  APP_COLOR: blue
  APP_MODE: prod
```

### 5. Secret

Stores sensitive information (encoded in base64).

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
type: Opaque
data:
  DB_USER: YWRtaW4=
  DB_PASSWORD: MWYyZDFlMmU2N2Rm
```

### 6. PersistentVolume (PV)

Represents a storage resource in the cluster.

```yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-volume
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"
```

### 7. PersistentVolumeClaim (PVC)

Requests storage from a PV.

```yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
```

### 8. Namespace

Creates logical partitions in a cluster.

```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: production
```

### 9. Job

Creates one or more pods to complete a task.

```yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: pi-calculation
spec:
  template:
    spec:
      containers:
      - name: pi
        image: perl
        command: ["perl", "-Mbignum=bpi", "-wle", "print bpi(2000)"]
      restartPolicy: Never
  backoffLimit: 4
```

### 10. CronJob

Runs Jobs on a time-based schedule.

```yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: hello-cron
spec:
  schedule: "*/1 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: hello
            image: busybox
            command: ["echo", "Hello from Kubernetes cluster"]
          restartPolicy: OnFailure
```

### 11. Ingress

Manages external access to services.

```yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: example-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: myapp.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: web-service
            port:
              number: 80
```

### 12. StatefulSet

Manages stateful applications with stable network identities.

```yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web
spec:
  serviceName: "nginx"
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.19
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
        - name: www
          mountPath: /usr/share/nginx/html
  volumeClaimTemplates:
  - metadata:
      name: www
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
```

### 13. DaemonSet

Ensures all (or some) nodes run a copy of a pod.

```yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluentd-logging
  labels:
    k8s-app: fluentd-logging
spec:
  selector:
    matchLabels:
      name: fluentd-logging
  template:
    metadata:
      labels:
        name: fluentd-logging
    spec:
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      containers:
      - name: fluentd
        image: fluent/fluentd:v1.14-debian-1
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - name: varlog
          mountPath: /var/log
      terminationGracePeriodSeconds: 30
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
```

### 14. HorizontalPodAutoscaler (HPA)

Automatically scales workloads based on metrics.

```yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: nginx-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nginx-deployment
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
```

## Advanced YAML Features

### 1. Multi-container Pods

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: multi-container-pod
spec:
  containers:
  - name: nginx
    image: nginx
    ports:
    - containerPort: 80
  - name: log-collector
    image: busybox
    command: ['sh', '-c', 'tail -f /dev/null']
```

### 2. Resource Limits

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: limited-pod
spec:
  containers:
  - name: app
    image: my-app-image
    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "128Mi"
        cpu: "500m"
```

### 3. Environment Variables

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: env-pod
spec:
  containers:
  - name: env-container
    image: busybox
    command: ["/bin/sh", "-c", "printenv"]
    env:
    - name: GREETING
      value: "Hello World"
    - name: DB_HOST
      valueFrom:
        configMapKeyRef:
          name: app-config
          key: DB_HOST
    - name: DB_PASSWORD
      valueFrom:
        secretKeyRef:
          name: app-secret
          key: DB_PASSWORD
```

### 4. Volumes

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: volume-pod
spec:
  containers:
  - name: nginx
    image: nginx
    volumeMounts:
    - name: html-volume
      mountPath: /usr/share/nginx/html
  volumes:
  - name: html-volume
    hostPath:
      path: /data/html
      type: Directory
```

### 5. Init Containers

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: init-container-pod
spec:
  containers:
  - name: app-container
    image: my-app-image
  initContainers:
  - name: init-db
    image: busybox
    command: ['sh', '-c', 'until nslookup db-service; do echo waiting for db; sleep 2; done']
```

## Best Practices for Kubernetes YAML

1. **Always specify resource limits** to prevent resource starvation
2. **Use labels consistently** for effective resource selection
3. **Keep configurations separate** using ConfigMaps and Secrets
4. **Use namespaces** to organize resources
5. **Include liveness and readiness probes** for better health checks
6. **Version your images** explicitly (avoid `latest`)
7. **Use kubectl explain** to understand fields (`kubectl explain pod.spec`)
8. **Validate YAML** before applying (`kubectl apply --dry-run=client -f file.yaml`)
9. **Use Helm or Kustomize** for managing complex deployments
10. **Document your YAML** with comments for maintainability

## YAML Validation and Troubleshooting

1. **Syntax validation**:
   ```bash
   yamllint my-file.yaml
   ```

2. **Kubernetes schema validation**:
   ```bash
   kubectl apply --dry-run=client -f my-file.yaml
   ```

3. **View generated YAML**:
   ```bash
   kubectl get deployment/my-deployment -o yaml
   ```

4. **Explain fields**:
   ```bash
   kubectl explain pod.spec.containers
   ```

This comprehensive guide covers the essential Kubernetes YAML structures and resource types. Each resource type serves specific purposes in your cluster, and combining them effectively allows you to build robust, scalable applications on Kubernetes.