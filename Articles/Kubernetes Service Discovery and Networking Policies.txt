كيف Kubernetes بيتعامل مع **اكتشاف الخدمات (Service Discovery)** و**سياسات الشبكة (Networking Policies)**

Kubernetes بيوفر أدوات قوية عشان يساعد الـ Pods والخدمات يتواصلوا مع بعض بشكل سلس وآمن، حتى لو الـ Pods اتنقلت أو اتغيرت. هنا شرح مبسط لكيفية تعامل Kubernetes مع الحاجات دي:

---

### **1. اكتشاف الخدمات (Service Discovery)**
اكتشاف الخدمات في Kubernetes بيسمح للـ Pods والخدمات إنهم يلاقوا بعض ويتواصلوا بسهولة، حتى لو الـ Pods اتغيرت أو اتنقلت بين العقد (Nodes).

#### **الأجزاء الأساسية:**
- **الخدمات (Services)**: الخدمة في Kubernetes هي حاجة بتجمع مجموعة من الـ Pods مع بعض وتوفر عنوان IP ثابت واسم DNS عشان التطبيقات التانية تقدر توصل لهم.
  - **ClusterIP**: النوع الافتراضي للخدمة، بيظهر الخدمة على عنوان IP داخلي في الكلستر.
  - **NodePort**: بيظهر الخدمة على منفذ (Port) في كل عقدة في الكلستر.
  - **LoadBalancer**: بيتكامل مع مزودي السحابة عشان يعرض الخدمة برة الكلستر عن طريق موزع تحميل (Load Balancer).
  - **ExternalName**: بيحول الخدمة لاسم DNS خارجي.

- **DNS**: Kubernetes فيه خدمة DNS مدمجة (عادة CoreDNS) بتعين أسماء DNS تلقائيًا للخدمات والـ Pods. مثلاً:
  - لو عندك خدمة اسمها `my-service` في نطاق `default`، تقدر توصلها عن طريق `my-service.default.svc.cluster.local`.
  - الـ Pods تقدر تحلل الاسم DNS دا لعنوان IP الخاص بالخدمة.

- **متغيرات البيئة (Environment Variables)**: لما يتعمل Pod، Kubernetes بيضيف متغيرات بيئة لكل خدمة في نفس النطاق (Namespace)، عشان الـ Pods تقدر توصل للخدمات عن طريق الاسم.

- **النقاط الطرفية (Endpoints)**: Kubernetes بيخلق كائن **Endpoints** تلقائيًا لكل خدمة، والكائن دا بيحتوي على عناوين IP والمنافذ الخاصة بالـ Pods اللي بتدعم الخدمة. دا بيضمن إن الحركة بتتوجه للـ Pods الصح.

---

### **2. سياسات الشبكة (Networking Policies)**
سياسات الشبكة في Kubernetes بتتحكم في كيفية تواصل الـ Pods مع بعضها ومع الشبكات الخارجية. دي بتساعد في فرض قواعد أمان ومراقبة حركة المرور.

#### **الأجزاء الأساسية:**
- **إضافات الشبكة (Network Plugins)**: Kubernetes بيستخدم إضافات اسمها **CNI** (واجهة شبكة الحاويات) عشان يدير الشبكات. من الإضافات المشهورة Calico وFlannel وCilium. الإضافات دي بتدير التواصل بين الـ Pods وتخصيص عناوين IP وتنفيذ سياسات الشبكة.

- **سياسات الشبكة (Network Policies)**: ملف **NetworkPolicy** بيحدد القواعد اللي بتسمح أو تمنع حركة المرور من وإلى الـ Pods. يعتبر زي جدار حماية للـ Pods.
  - **المحددات (Selectors)**: سياسات الشبكة بتستخدم التسميات (Labels) عشان تحدد الـ Pods اللي السياسة تنطبق عليها.
  - **قواعد الوارد (Ingress Rules)**: بتحدد المصادر (مثل Pods أو نطاقات IP) اللي مسموح لها توصل للـ Pods المحددة.
  - **قواعد الصادر (Egress Rules)**: بتحدد الأماكن اللي الـ Pods المحددة مسموح لها توصل ليها.
  - **الرفض الافتراضي (Default Deny)**: بشكل افتراضي، Kubernetes بيسمح بكل حركة المرور. لو عايز تعمل سياسة "الرفض الافتراضي"، لازم تعمل NetworkPolicy يمنع كل الحركة الواردة والصادرة.

#### **مثال على NetworkPolicy:**
```yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-app-to-db
spec:
  podSelector:
    matchLabels:
      role: db
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              role: app
      ports:
        - protocol: TCP
          port: 5432
```
السياسة دي بتسمح فقط للـ Pods اللي عندها تسمية `role: app` إنها توصل للـ Pods اللي عندها تسمية `role: db` على المنفذ 5432.

---

### **كيف Kubernetes بيشغل الشبكات**
- **شبكة الـ Pods**: كل Pod بياخد عنوان IP فريد، وكل الحاويات في الـ Pod بتشارك نفس مساحة الشبكة (Network Namespace). دا بيسمح للحاويات داخل الـ Pod إنها تتواصل مع بعض عن طريق `localhost`.
- **شبكة الخدمات (Service Networking)**: كل خدمة بتاخد عنوان IP افتراضي (ClusterIP) مستقر ومستقل عن عناوين IP الـ Pods. الـ kube-proxy على كل عقدة بيضمن إن الحركة بتتوجه لعنوان IP الخدمة للـ Pods المناسبة.
- **وحدات تحكم الوارد والصادر (Ingress and Egress Controllers)**: وحدات تحكم الوارد (Ingress Controllers) بتدير الوصول الخارجي للخدمات، عادة عن طريق HTTP/HTTPS، ووحدات تحكم الصادر (Egress Controllers) ممكن تقيد أو تراقب الحركة الصادرة.

---

### **خلاصة**
- **اكتشاف الخدمات (Service Discovery)**: Kubernetes بيستخدم الخدمات (Services)، DNS، والنقاط الطرفية (Endpoints) عشان يوفر تواصل سلس بين الـ Pods.
- **سياسات الشبكة (Networking Policies)**: Kubernetes بيستخدم NetworkPolicy وإضافات CNI عشان يفرض قواعد أمان ويحكم في حركة المرور بين الـ Pods والشبكات الخارجية.

باستخدام الأدوات دي، Kubernetes بيضمن إن التطبيقات تقدر تتواصل بأمان وكفاءة في بيئة متغيرة وموزعة.