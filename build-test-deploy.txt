Here's a pipeline breakdown for different programming languages, including the tools to install, build, test, and deploy:

---

### **1. JavaScript/TypeScript (Node.js)**
#### **Tools to Install:**
- **Node.js** (with npm/yarn/pnpm)  
- **Testing**: Jest, Mocha, Cypress (e2e)  
- **Linting/Formatting**: ESLint, Prettier  
- **Bundling**: Webpack, Vite, esbuild  
- **Deployment**: PM2 (for servers), Vercel/Netlify (frontend), Docker  

#### **Pipeline Commands:**
```bash
# Install dependencies
npm install

# Lint code
npm run lint

# Run tests
npm test  # or `npm run test:ci` for CI

# Build (for frontend/backend)
npm run build

# Deploy (varies by platform)
npm run deploy  # If configured (e.g., Vercel/Netlify)
# OR for Node.js servers:
pm2 start server.js --name "my-app"
```

---

### **2. Python**
#### **Tools to Install:**
- **Python** (3.x) + pip  
- **Virtual env**: `venv`, `pipenv`, or `conda`  
- **Testing**: `pytest`, `unittest`  
- **Linting**: `flake8`, `pylint`, `black` (formatting)  
- **Packaging**: `setuptools`, `poetry`  
- **Deployment**: `gunicorn`/`uvicorn` (ASGI), Docker, AWS Lambda  

#### **Pipeline Commands:**
```bash
# Create and activate virtual env
python -m venv venv
source venv/bin/activate  # Linux/Mac
venv\Scripts\activate     # Windows

# Install dependencies
pip install -r requirements.txt

# Run tests
pytest

# Build package (if applicable)
python setup.py sdist bdist_wheel  # or `poetry build`

# Deploy (example: Flask/Django with Gunicorn)
gunicorn -w 4 app:app  # For Flask
# OR deploy to serverless:
aws lambda deploy --function-name my-function --zip-file fileb://deploy.zip
```

---

### **3. Java (Spring Boot)**
#### **Tools to Install:**
- **JDK** (17+)  
- **Build Tool**: Maven or Gradle  
- **Testing**: JUnit, Mockito  
- **Packaging**: JAR/WAR  
- **Deployment**: Docker, Jenkins, AWS Elastic Beanstalk  

#### **Pipeline Commands:**
```bash
# Build and test
mvn clean install  # Runs tests by default

# Run locally
java -jar target/myapp.jar

# Deploy (Docker example)
docker build -t myapp .
docker run -p 8080:8080 myapp
```

---

### **4. Go**
#### **Tools to Install:**
- **Go compiler**  
- **Testing**: Built-in `go test`  
- **Linting**: `golangci-lint`  
- **Deployment**: Static binary, Docker  

#### **Pipeline Commands:**
```bash
# Run tests
go test ./...

# Build
go build -o myapp

# Deploy (Docker example)
docker build -t myapp .
docker run -p 8080:8080 myapp
```

---

### **5. Rust**
#### **Tools to Install:**
- **Rust** (`rustup`)  
- **Testing**: Built-in `cargo test`  
- **Linting**: `clippy`  
- **Deployment**: Static binary, Docker  

#### **Pipeline Commands:**
```bash
# Run tests
cargo test

# Build release
cargo build --release

# Deploy (Docker example)
docker build -t myapp .
docker run myapp
```

---

### **6. C# (.NET)**
#### **Tools to Install:**
- **.NET SDK**  
- **Testing**: xUnit, NUnit  
- **Deployment**: Docker, Azure App Service  

#### **Pipeline Commands:**
```bash
# Restore dependencies
dotnet restore

# Run tests
dotnet test

# Publish
dotnet publish -c Release -o ./out

# Deploy (Docker example)
docker build -t myapp .
docker run -p 5000:80 myapp
```

---

### **7. Ruby (Ruby on Rails)**
#### **Tools to Install:**
- **Ruby** + `bundler`  
- **Testing**: RSpec, Capybara  
- **Deployment**: Passenger, Docker, Heroku  

#### **Pipeline Commands:**
```bash
# Install dependencies
bundle install

# Run tests
bundle exec rspec

# Deploy (Heroku example)
git push heroku main
# OR with Docker:
docker-compose up --build
```

---

### **8. PHP (Laravel)**
#### **Tools to Install:**
- **PHP** + Composer  
- **Testing**: PHPUnit  
- **Deployment**: Laravel Forge, Docker  

#### **Pipeline Commands:**
```bash
# Install dependencies
composer install

# Run tests
php artisan test

# Deploy (Docker example)
docker-compose up -d --build
```

---

### **CI/CD Tools Integration**
- **GitHub Actions**: `.github/workflows/*.yml`  
- **GitLab CI**: `.gitlab-ci.yml`  
- **Jenkins**: `Jenkinsfile`  

Example (GitHub Actions for Node.js):
```yaml
name: Node.js CI
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - run: npm install
      - run: npm test
      - run: npm run build
```

---

### **Key Tools Across Pipelines**
| Task          | Tools                                                                 |
|---------------|-----------------------------------------------------------------------|
| **Build**     | `npm`, `maven`, `gradle`, `go build`, `cargo`, `dotnet publish`       |
| **Test**      | `jest`, `pytest`, `junit`, `go test`, `rspec`, `phpunit`              |
| **Lint**      | `eslint`, `pylint`, `golangci-lint`, `clippy`                         |
| **Deploy**    | `docker`, `k8s`, `pm2`, `gunicorn`, `heroku`, `aws-cli`, `terraform`  |

Let me know if you'd like a deeper dive into any specific language!