https://www.youtube.com/watch?v=pBrQl6muY4g

6-Arithatic Operators
=====================
vagrant@Amer:~$ result=$((3+4))
vagrant@Amer:~$ echo $result
7

vagrant@Amer:~$ result=$((3**2))
vagrant@Amer:~$ echo $result
9
----------------------
vi var1.sh

read -p "please enter the first number: " var1
read -p "please enter the second number: " var2
echo "addition: " $((var1 + var2))
echo "subtraction: " $((var1 - var2))
echo "multiplication: "$((var1 * var2))
echo "division: " $((var1 / var2))
echo "remainder: " $((var1 % var2))
echo "power: " $((var1 ** var2))

			OR

read -p "please enter the first number: " var1
read -p "please enter the second number: " var2
echo "addition: " 'expr var1 + var2'
echo "subtraction: " 'expr var1 - var2'
echo "multiplication: " 'expr var1 * var2'
echo "division: " 'expr var1 / var2'
echo "remainder: " 'expr var1 % var2'
echo "power: " 'expr var1 ** var2'


vagrant@Amer:~$ ./var1.sh
please enter the first number: 2
please enter the second number: 3
addition:  5
subtraction:  -1
multiplication: 6
division:  0
remainder:  2
power:  8
---------------------------
var1=$1
var2=$2
echo "addition: " $((var1 + var2))
echo "subtraction: " $((var1 - var2))
echo "multiplication: "$((var1 * var2))
echo "division: " $((var1 / var2))
echo "remainder: " $((var1 % var2))
echo "power: " $((var1 ** var2))

vagrant@Amer:~$ ./var1.sh 2 3
addition:  5
subtraction:  -1
multiplication: 6
division:  0
remainder:  2
power:  8
-----------------------------
+= , -= , *= , /= , %= , ++var , var++ , --var , var--
x+=5 --> x = x + 5 , ++var = 1 + var , var++ = var + 1 , --vare = 1 - var , var-- = var - 1

var1=5
var2=8
result1=$((++var1 + 2)) <--- variable var1 value will be modified before making the calculation
result2=$((var2++ + 2)) <--- variable var2 value will be modified after making the calculation
echo $result1 <-- 1+var1 + 2 = 1+5 + 2 = 8
echo $result2 <-- var2 + 2 = 8 + 2 = 10
echo $var1 <-- 1+var1 = 1+5 = 6
echo $var2 <-- var2 = 8+1 = 9
==========================================================================
7-Arithatic Operators
=====================
vagrant@Amer:~$ expr 5 \* 3
15
vagrant@Amer:~$ expr 5 + 3
8
vagrant@Amer:~$ expr 5 % 3
2
vagrant@Amer:~$ expr 5 / 3
1
vagrant@Amer:~$ expr 5 - 3
2
vagrant@Amer:~$ expr 5 ** 3
expr: syntax error
vagrant@Amer:~$ echo $((2 ** 3)) 2^3
8

----------------------------------
vi varstring.sh
varString="AmerMagdi"  AmerMagdi <-- 9 chars  note: "Amer Magdi" with space in-between is not accepted and can lead to syntax error
echo `expr length $varString`

./varstring.sh
9
-----------------------
varString="AmerMagdi"
echo `expr index $varString A`  <-- position of char A in the variable
echo `expr index $varString e`
echo `expr index $varString M`
echo `expr index $varString i`

vagrant@Amer:~$ ./varstring.sh
1
3
5
9
-----------------------------
varString="AmerMagdi"
echo `expr substr $varString 5 9`  <--- will write strings from 5th char to 9th char

vagrant@Amer:~$ ./varstring.sh
Magdi
=================================================================
8-Arithatic Operators
=====================
vagrant@Amer:~$ var1=`expr 3 \| 5`  <-- for | if first argument is not 0 or null then it will print the first argument 
vagrant@Amer:~$ echo $var1
3
----------------------------
vagrant@Amer:~$ var1=`expr 0 \| 5` <-- first argument is 0 ,then it will print the second argument
vagrant@Amer:~$ echo $var1
5
----------------------------
vagrant@Amer:~$ var1=`expr 6 \| 0`
vagrant@Amer:~$ echo $var1
6
--------------------------
--------------------------
vagrant@Amer:~$ var1=`expr 6 \& 0`
vagrant@Amer:~$ echo $var1
0
---------------------------------
vagrant@Amer:~$ var1=`expr 0 \& 4`
vagrant@Amer:~$ echo $var1
0
-----------------------------
vagrant@Amer:~$ var1=`expr 4 \& 7`
vagrant@Amer:~$ echo $var1
4
---------------------------
vagrant@Amer:~$ var1=`expr 5 \& -1`
vagrant@Amer:~$ echo $var1
--------------------------
--------------------------
vagrant@Amer:~$ expr 0 > -1
vagrant@Amer:~$ expr 0 \> -1
1			<------------------ true
vagrant@Amer:~$ expr 2 \> 5
0			<------------------ false
vagrant@Amer:~$ expr 2 \> 1
1
vagrant@Amer:~$ expr 2 \< 1
0
vagrant@Amer:~$ expr 2 \< 9
1
vagrant@Amer:~$ expr 2 \<= 9
1
vagrant@Amer:~$ expr 5 \<= 2
0
vagrant@Amer:~$ expr 2 \= 2
1
vagrant@Amer:~$ expr 1 \= 2
0
vagrant@Amer:~$ expr 1 \!= 2
1
vagrant@Amer:~$ expr 5 \!= 5
0
==========================================================================
9-Arithatic Operators
=====================
vagrant@Amer:~$ echo 3.2 + 4.1 | bc
7.3
vagrant@Amer:~$ echo 4.5 - 3.2  | bc
1.3
vagrant@Amer:~$ echo 1.5 *\ 4.0 | bc
6.0
vagrant@Amer:~$ echo 1.5 *\ 4 | bc
6.0
vagrant@Amer:~$ echo 1.5 \* 4 | bc
6.0
vagrant@Amer:~$ echo 6 / 1.5 | bc
4

vagrant@Amer:~$ divide=echo 6 / 1.5 | bc
6: command not found
vagrant@Amer:~$ divide=`echo 6 / 1.5 | bc`
vagrant@Amer:~$ echo $divide
4
-------------------------
var1=$1
var2=$2

resultsum=`echo $var1 + $var2 | bc`
echo "sum : $resultsum"
echo "Subtract : `echo $var1 - var2 | bc`"
echo "Multiply : `echo $var1 \* $var2 | bc`"
echo "Divide : `echo $var1 / $var2 | bc`"
echo "Remainder : `echo $var1 % $var2 | bc`"

vagrant@Amer:~$ ./result.sh 5 3
sum : 8
Subtract : 2
Multiply : 15
Divide : 1
Remainder : 2
vagrant@Amer:~$ ./result.sh 5.1 3.3
sum : 8.4
Subtract : 1.8
Multiply : 16.8
Divide : 1
Remainder : 1.8
=========================================================================
10-Arithatic Operators
=====================
vagrant@Amer:~$ let var1=1+1 var2=2-2 var3=5\*3 var4=16/4
vagrant@Amer:~$ echo $var1
2
vagrant@Amer:~$ echo $var2
0
vagrant@Amer:~$ echo $var3
15
vagrant@Amer:~$ echo $var4
4
vagrant@Amer:~$ echo $var1 $var2 $var3 $var4
2 0 15 4
vagrant@Amer:~$ let var1++
vagrant@Amer:~$ echo $var1
3
vagrant@Amer:~$ let var1++
vagrant@Amer:~$ echo $var1
4
vagrant@Amer:~$ let var1--
vagrant@Amer:~$ echo $var1
3
vagrant@Amer:~$ let var1+=5
vagrant@Amer:~$ echo $var1
8
-------------------------
let var1=$1
let var2=$2
let var3=$3 var4=$4

let ++var1
let var2++ --var3
let var4--

echo "++Var1 : $var1"
echo "Var2++ : $var2"
echo "--Var3 : $var3"
echo "Var4-- : $var4"

vagrant@Amer:~$ ./variables.sh 5 5 5 5
++Var1 : 6
Var2++ : 6
--Var3 : 4
Var4-- : 4
=========================================================
11-If Statement
===============
if [ condition  ]; 
then 
	echo "message"; 
fi
------------
vi if.sh

let age1=$1 age2=$2 age3=$3 age4=$4 age5=$5 age6=$6

if [ $age1 -eq 20 ]
then
        echo "yes equal 20"
else
        echo "Not equal !!"
fi

if [ $age2 -ne 30 ]
then
        echo "yes not equal 30 "
else
        echo "no it is equal 30"
fi

if [ $age3 -gt 40 ]
then
        echo "yes Greater than 40"
else
        echo "Not Greater than 40"
fi

if [ $age4 -ge 50 ]
then
        echo "yes Greater-than or equal 50"
else
        echo "Not Greater than 50"
fi

if [ $age5 -lt 60 ]
then
        echo "yes Less than 60"
else
        echo "Not less than 60"
fi

if [ $age6 -le 70 ]
then
        echo "yes Less-than or equal 70 "
else
        echo "Not less than 70"
fi

vagrant@Amer:~$ ./if.sh 20 31 41 50 59 70
yes equal 20
yes not equal 30
yes Greater than 40
yes Greater-than or equal 50
yes Less than 60
yes Less-than or equal 70

vagrant@Amer:~$ ./if.sh 19 30 40 49 61 71
Not equal !!
No it is equal 30
Not Greater than 40
Not Greater than 50
Not less than 60
Not less than 70
====================================================
12-If Statement
===============
vagrant@Amer:~$ age=21
vagrant@Amer:~$ if [ $age -eq 21 ]; then echo "True"; fi
True

vagrant@Amer:~$ age=22
vagrant@Amer:~$ if [ $age -eq 21 ]; then echo "True"; else echo "False"; fi
False
==================================================
13-If Statement
===============
number=$1
if [ $number -gt 0 ] 
then 
	echo "Positive"
elif [ $number -lt 0 ] 
then 
	echo "Negative"
else
	echo "Zero"
fi

vagrant@Amer:~$ ./elif.sh 5
Positive
vagrant@Amer:~$ ./elif.sh -1
Negative
vagrant@Amer:~$ ./elif.sh 0
Zero
===========================================================
14-If Statement
===============
vi job.sh

read -p "please enter your age: " age
read -p "please enter your GPA: " gpa
if [ $age -ge 20 ]
then
	if [ $gpa -ge 80 ]
then
	echo "Accepted"
else
	echo "Rejected"
	fi
else
        echo "Rejected"
fi

vagrant@Amer:~$ ./job.sh
please enter your age: 20
please enter your GPA: 80
Accepted
vagrant@Amer:~$ ./job.sh
please enter your age: 22
please enter your GPA: 79
Rejected
vagrant@Amer:~$ ./job.sh
please enter your age: 19
please enter your GPA: 80
Rejected

			another way

vi job2.sh

read -p "please enter your age: " age
read -p "please enter your GPA: " gpa
if [ $age -gt 20 ] && [ $gpa -gt 85 ]
then
	echo "Accepted"
else
	echo "Rejected"
fi

vagrant@Amer:~$ vi job2.sh
vagrant@Amer:~$ ./job2.sh
please enter your age: 20
please enter your GPA: 85
Rejected
vagrant@Amer:~$ ./job2.sh
please enter your age: 21
please enter your GPA: 85
Rejected
vagrant@Amer:~$ ./job2.sh
please enter your age: 21
please enter your GPA: 86
Accepted
-----------------------------------------
vi job3.sh

let age=$1 degree=$2
if [ $age -gt 20 ] || [ $degree -gt 85 ]
then
        echo "Accepted"
else
        echo "Rejected"
fi

vagrant@Amer:~$ ./job3.sh 21 85
Accepted
vagrant@Amer:~$ ./job3.sh 20 85
Rejected
vagrant@Amer:~$ ./job3.sh 20 86
Accepted
----------------------------------------------
read -p "please enter your age: " age
read -p "please enter your GPA: " gpa
let age=$1 degree=$2
if [ $age -gt 20 ] || ! [ $degree -lt 80 ]   # <------- ! [ True ] = false
then
        echo "Accepted"
else
        echo "Rejected"
fi
========================================================================
15-If Statement
===============
ls
Amer

vi directory.sh

directory=Amer
if [ -d $directory ]  <------ -d :check if it is folder and exists
then
        echo "folder exist"
else
        echo "folder don't exist"
fi

vagrant@Amer:~$ ./directory.sh
folder exist
---------------------
ls
bash_scripts

vi directory2.sh

if [ -d bash_scripts ]
then
        echo "exist"
else
        echo "folder don't exist"
fi

vagrant@Amer:~$ ./directory2.sh
folder exist
--------------------------
check.sh
touch file2.sh
if [ -f file2.sh]  <----- check the file existance
then
	echo "file exist"
else
	echo "file don't exist"
fi

vagrant@Amer:~$ ./check.sh
file exist
----------------------------------
ls -l
drwxrwxr-x 2 vagrant vagrant  4096 Dec 24 16:42  Amer         <---  folder
-rw-rw-r-- 1 vagrant vagrant     0 Dec 24 16:55  file.sh      <---  file

vi directory3.sh

if [ -e file.sh ] && [ -e Amer ]  <------  -e : check the existance despite it is file or folder
then
        echo "exist"
else
        echo "don't exist"
fi

vagrant@Amer:~$ ./directory3.sh
exist
--------------------------------
vi directory5.sh

#1st time checking size
touch file1.sh
if [ -s file1.sh ]
then
        echo "1st time : size greater than 0"
else
        echo "1st time : size is 0"
fi

#filling file
echo "just filling the file" > file1.sh

#2nd time checking size
if [ -s file1.sh ]
then
        echo "2nd time : size greater than 0"
else
        echo "2nd time : size is 0"
fi

vagrant@Amer:~$ ./directory5.sh
1st time : size is 0
2nd time : size greater than 0
------------------------------
vi check.sh

touch file2.sh
if [ -f file2.sh]  <----- check the file existance
then
	echo "file exist"
else
	echo "file don't exist"
fi

vagrant@Amer:~$ ./check.sh
file exist
----------------------------------
vi read.sh

file=file1.sh

#giving read permission
chmod +r $file

echo "$(ls -l $file)"

#1st time checking permission
if [ -r $file ]  #<-------- check if file exist and have read permission
then
        echo "First time : Has Read Permission"
else
        echo "First time : Don't have Read Permission"
fi

#removing read permission
chmod -r $file

echo "$(ls -l $file)"

#2nd time checking permission
if [ -r $file ]
then
        echo "Second time : Has Read Permission"
else
        echo "Second time : Don't have Read Permission"
fi


vagrant@Amer:~$ ./read.sh
-r--r--r-- 1 vagrant vagrant 22 Dec 24 17:42 file1.sh
First time : Has Read Permission
---------- 1 vagrant vagrant 22 Dec 24 17:42 file1.sh
Second time : Don't have Read Permission
-----------------------------------------------
vi write.sh

file=file1.sh

#giving write permission
chmod +w $file

echo "$(ls -l $file)"

#1st time checking permission
if [ -w $file ]  #<-------- check if file exist and have write permission
then
        echo "First time : Has write Permission"
else
        echo "First time : Don't have write Permission"
fi

#removing write permission
chmod -w $file

echo "$(ls -l $file)"

#2nd time checking permission
if [ -w $file ]
then
        echo "Second time : Has write Permission"
else
        echo "Second time : Don't have write Permission"
fi

vagrant@Amer:~$ ./write.sh
--w--w---- 1 vagrant vagrant 22 Dec 24 17:42 file1.sh
First time : Has write Permission
---------- 1 vagrant vagrant 22 Dec 24 17:42 file1.sh
Second time : Don't have write Permission
-----------------------------------------------------------------
vi write.sh

file=file1.sh

#giving write permission
chmod +w $file

echo "$(ls -l $file)"

#1st time checking permission
if [ -w $file ]  #<-------- check if file exist and have write permission
then
        echo "First time : Has write Permission"
else
        echo "First time : Don't have write Permission"
fi

#removing write permission
chmod -w $file

echo "$(ls -l $file)"

#2nd time checking permission
if [ -w $file ]
then
        echo "Second time : Has write Permission"
else
        echo "Second time : Don't have write Permission"
fi

vagrant@Amer:~$ ./write.sh
--w--w---- 1 vagrant vagrant 22 Dec 24 17:42 file1.sh
First time : Has write Permission
---------- 1 vagrant vagrant 22 Dec 24 17:42 file1.sh
Second time : Don't have write Permission
---------------------------------------------------------------
vi execute.sh

read -p "please enter the file name : " file

#giving execute permission
chmod +x $file

echo "$(ls -l $file)"

#1st time checking permission
if [ -x $file ]  #<---------- check if file exist and have execute permission
then
        echo "First time : Has execute Permission"
else
        echo "First time : Don't have execute Permission"
fi

#removing execute permission
chmod -x $file

echo "$(ls -l $file)"

#2nd time checking permission
if [ -x $file ]
then
        echo "Second time : Has execute Permission"
else
        echo "Second time : Don't have execute Permission"
fi

vagrant@Amer:~$ ./execute.sh
please enter the file name : file1
-rwxrwxr-x 1 vagrant vagrant 0 Dec 24 17:42 file1
First time : Has execute Permission
-rw-rw-r-- 1 vagrant vagrant 0 Dec 24 17:42 file1
Second time : Don't have execute Permission
====================================================================================
16-Regular Expression
=====================

